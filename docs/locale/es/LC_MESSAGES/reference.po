# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, chivke
# This file is distributed under the same license as the serveliza package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: serveliza 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-01 20:18-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../reference.rst:2
msgid "API Reference"
msgstr ""

#: ../../reference.rst:4
msgid ""
"This section exposes the documentation of the classes and functions that "
"support serveliza. Your query will allow an understanding of  your logic "
"for `programmatic use`_."
msgstr ""

#: ../../reference.rst:7
msgid "Electoral Roll"
msgstr ""

#: ../../reference.rst:9
msgid "|Roll|"
msgstr ""

#: ../../reference.rst:11
msgid "Main module: :mod:`serveliza.roll.roll`"
msgstr ""

#: ../../reference.rst:17
msgid "Auxiliary modules:"
msgstr ""

#: ../../reference.rst:13
msgid ":mod:`serveliza.roll.adapters`"
msgstr ""

#: ../../reference.rst:14
msgid ":mod:`serveliza.roll.parsers`"
msgstr ""

#: ../../reference.rst:15
msgid ":mod:`serveliza.roll.memorizer`"
msgstr ""

#: ../../reference.rst:16
msgid ":mod:`serveliza.roll.exporter`"
msgstr ""

#: ../../reference.rst:17
msgid ":mod:`serveliza.roll.printer`"
msgstr ""

#: ../../reference.rst:23
msgid "Main class"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:1
msgid ""
":class:`ElectoralRoll <.ElectoralRoll>` allows to     instantiate an "
"electoral roll of the chilean Electoral Service     (*Servicio Electoral "
"de Chile*, SERVEL) from PDF files."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:3
msgid ""
"Different parameters are handled in the constructor of this class. In"
"     itself it handles the *source* parameter that determines the path"
"     where to recognize pdf files (it can be a directory path or a file),"
"     the *recursive* parameter that determines whether to search in the"
"     root of the defined path or in each of its subdirectories, and     "
"the *auto* parameter that determines if the extraction is automatic.     "
"It also inherits parameters from :class:`PDFProcessorMixin     "
"<.PDFProcessorMixin>` (*processor*). Likewise, in the constructor     it "
"instantiates other nested classes by routing their parameters."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix
#: serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext
#: serveliza.roll.adapters.RollAdapter serveliza.roll.exporter.RollExporter
#: serveliza.roll.exporter.RollExporter.export_sheet
#: serveliza.roll.memorizer.RollMemorizer
#: serveliza.roll.memorizer.RollMemorizer.memorize
#: serveliza.roll.memorizer.RollMemorizer.prepare_rid
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_entries
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_nulls
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_places
#: serveliza.roll.roll.ElectoralRoll serveliza.roll.roll.ElectoralRoll.run_file
#: serveliza.roll.roll.ElectoralRoll.sheet_export
#: serveliza.roll.roll.ElectoralRoll.sheet_memorize
#: serveliza.roll.roll.ElectoralRoll.sheet_parse
msgid "Parameters"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:5
msgid "The source path of pdf files."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:6
msgid "Run the extract in the instantation."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:7
msgid ""
"Determines if the search for pdf files in the         delivered source is"
" recursive or is only for the root of the         indicated directory,"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:8
msgid ""
"Processor to use (default='pdftotext', see         more in "
":class:`PDFProcessorMixin <.PDFProcessorMixin>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:9
msgid ""
"Storage data in memory of instance (default=True,         see more in "
":class:`RollMemorizer <.RollMemorizer>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:10
msgid ""
"If export data in csv file (default=False,         see more in "
":class:`RollExporter <.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:11
msgid ""
"Directory to store the data in csv file(s) (        see more in "
":class:`RollExporter <.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:12
msgid ""
"Determines the data export mode in files. If it         is *unified* "
"(default) it creates a single csv file with the data,         or if it is"
" *separated* into several according to communal or         regional "
"criteria (see more in :class:`RollExporter <.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:13
msgid ""
"Criteria for separating files in export in         separate mode "
"(*commune* or *region*, default=\"commune\",         see more in "
":class:`RollExporter <.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:14
msgid ""
"Determines whether exported files have a         random text string "
"appended to the end (see more in         :class:`RollExporter "
"<.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:15
msgid ""
"Determines whether to generate a summary file of         the export and "
"the extracted data (see more in :class:`RollExporter         "
"<.RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:17
msgid "Anyway, only the *source* parameter is required:"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:22
msgid ""
"Setting the parameter *auto* to true in the constructor will     "
"automatically start the :meth:`run <.ElectoralRoll.run>` method:"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll:26
msgid ""
"See the :meth:`run <.ElectoralRoll.run>` at that method for a better     "
"understanding of this class."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:1
msgid ""
":meth:`ElectoralRoll.run <.ElectoralRoll.run>` is the main method"
"         within the class logic that executes the complete flow of data"
"         analysis and extraction:"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:3
msgid ""
"Iterate over the found files, ordered by size from smallest         to "
"largest, executing the :meth:`run_file <.ElectoralRoll.run_file>`"
"         method with the file, its index and the total."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:8
msgid "It iterates on each page of each file:"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:5
#: serveliza.roll.roll.ElectoralRoll.run_file:8
msgid ""
"*Processing* it with the library determined in the processor             "
"property and defined in the constructor (see more in             "
":class:`PDFProcessorMixin <.PDFProcessorMixin>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:6
#: serveliza.roll.roll.ElectoralRoll.run_file:9
msgid ""
"*Adapting* the rendered page if required by the application             "
"and the processor used (see more in :class:`RollAdapter             "
"<.RollAdapter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:7
#: serveliza.roll.roll.ElectoralRoll.run_file:10
msgid ""
"*Analyzing* the content text to extract its data (see more             in"
" :class:`RollParser <.RollParser>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:8
#: serveliza.roll.roll.ElectoralRoll.run_file:11
msgid ""
"*Memorizing* your data in a consolidated data stored in the             "
"memorizer. Its execution can be skipped by setting the             "
"*memorizer* parameter to false in the constructor (see more             "
"in :class:`RollMemorizer <.RollMemorizer>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:9
#: serveliza.roll.roll.ElectoralRoll.run_file:12
msgid ""
"*Exporting* your data to one or more csv files depending on             "
"how the exporter is configured. Its execution can be activated"
"             by defining the *export* parameter as true in the "
"constructor             (see more in :class:`RollExporter "
"<RollExporter>`)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run:10
msgid ""
"The printer (:class:`RollPrinter <.RollPrinter>` instance) is         "
"executed in each part of the flow and it determines if and how it"
"         prints on the screen (as declared in the constructor)."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run_file:1
msgid "data of file"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run_file:2
msgid "the number of file to analize."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run_file:3
msgid ""
"the total of files to analize. this param and before is needed for "
"printer."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run_file:6
msgid ""
"The :meth:`run_file <.ElectoralRoll.run_file>` method is called by"
"         the :meth:`run <.ElectoralRoll.run>` method and iterates on each"
" page         of each file:"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.run_file:14
msgid "Stores metadatas of the extraction of each file."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_parse:1
msgid "sheet in string."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix
#: serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext
#: serveliza.roll.exporter.RollExporter.export_sheet
#: serveliza.roll.exporter.RollExporter.is_active
#: serveliza.roll.memorizer.RollMemorizer.errors
#: serveliza.roll.memorizer.RollMemorizer.is_active
#: serveliza.roll.memorizer.RollMemorizer.storage
#: serveliza.roll.parsers.RollParser.circuns
#: serveliza.roll.parsers.RollParser.is_decomposed
#: serveliza.roll.parsers.RollParser.more_fields
#: serveliza.roll.roll.ElectoralRoll.entries
#: serveliza.roll.roll.ElectoralRoll.errors
#: serveliza.roll.roll.ElectoralRoll.exporter
#: serveliza.roll.roll.ElectoralRoll.fields
#: serveliza.roll.roll.ElectoralRoll.is_runned
#: serveliza.roll.roll.ElectoralRoll.memorizer
#: serveliza.roll.roll.ElectoralRoll.metadata
#: serveliza.roll.roll.ElectoralRoll.printer
#: serveliza.roll.roll.ElectoralRoll.rid serveliza.roll.roll.ElectoralRoll.roll
#: serveliza.roll.roll.ElectoralRoll.sheet_export
#: serveliza.roll.roll.ElectoralRoll.sheet_parse
#: serveliza.roll.roll.ElectoralRoll.source
#: serveliza.roll.roll.ElectoralRoll.to_dataframe
msgid "Returns"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_export:1
#: serveliza.roll.roll.ElectoralRoll.sheet_memorize:1
#: serveliza.roll.roll.ElectoralRoll.sheet_parse:2
msgid "instance of :class:`RollParser <.RollParser>`."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_parse:4
msgid ""
"Method that calls the class defined in the :attr:`inner_class_parser"
"         <.ElectoralRoll.inner_class_parser>` class attribute, "
"initializing it         with the sheet argument."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_memorize:3
msgid ""
"Method that routes a parsed page to the :meth:`memorize         "
"<.RollMemorizer.memorize>` method of the memorizer."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_export:2
msgid "Absolute path of the csv file where the data was exported."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.sheet_export:4
msgid ""
"Method that routes a parsed page to the :meth:`export_sheet         "
"<.RollExporter.export_sheet>` method of the exporter."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.printer:1
msgid "inner instance of :class:`RollPrinter <.RollPrinter>`."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.printer:3
msgid ""
"Property to call the :class:`RollPrinter <.RollPrinter>` object         "
"instanciated in constructor."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.memorizer:1
msgid "inner instance of :class:`RollMemorizer <.RollMemorizer>`."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.memorizer:3
msgid ""
"Property to call the :class:`RollMemorizer <.RollMemorizer>` object"
"         instanciated in constructor."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.exporter:1
msgid "inner instance of :class:`RollExporter <.RollExporter>`."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.exporter:3
msgid ""
"Property to call the :class:`RollExporter <.RollExporter>` object"
"         instanciated in constructor."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.is_active:1
#: serveliza.roll.memorizer.RollMemorizer.is_active:1
#: serveliza.roll.parsers.RollParser.is_decomposed:1
#: serveliza.roll.parsers.RollParser.more_fields:1
#: serveliza.roll.roll.ElectoralRoll.is_runned:1
msgid "boolean."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.is_runned:3
msgid ""
"Boolean property that indicates whether the instance has executed the"
"         :meth:`run <.ElectoralRoll.run>` method or not."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.metadata:1
msgid "dictionary with all metadata."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.metadata:3
msgid ""
"Property that stores the analysis metadata. It integrates the metadata of"
" each electoral register detected         in the analysis."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.rid:1
msgid "string with first roll identifier."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.rid:3
msgid ""
"Property that returns the identifier of the electoral roll analyzed. If "
"it will return only the first identifier detected, this should         "
"not cause inconvenience unless pdf files from different electoral"
"         rolls are loaded."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.rid:9
msgid "If the instance did not run, it returns None."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.roll:1
msgid "name of electoral roll."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.roll:3
msgid "Property that returns the full name of electoral roll analyzed."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.entries:8
#: serveliza.roll.roll.ElectoralRoll.fields:17
#: serveliza.roll.roll.ElectoralRoll.roll:8
msgid ""
"Internaly use the :attr:`rid <.ElectoralRoll.rid>` property. If the"
"         instance did not run, it returns None."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.entries:1
msgid "list of data entries of memorizer."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.entries:3
msgid ""
"Property that accesses the data entries of the electoral roll         "
"analyzed. The data is stored in the :class:`RollMemorizer         "
"<.RollMemorizer>` instance."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.fields:1
msgid "list of fields of electoral roll."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.fields:3
msgid "Property that returns the fields of the electoral roll analyzed."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.errors:1
msgid "list of errors found."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.errors:3
msgid ""
"Property that stores the errors of the analysis. List of errors         "
"found in the analysis. Errors are dictionaries with data to keep         "
"track of. The purpose of registering them is to improve the         "
"development of serveliza."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.to_dataframe:1
msgid "Pandas DataFrame instance."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext
#: serveliza.roll.roll.ElectoralRoll.source
#: serveliza.roll.roll.ElectoralRoll.to_dataframe
msgid "Raises"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.to_dataframe:2
msgid ""
"You need to run the application before             converting the result "
"to Pandas DataFrame."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.to_dataframe:4
msgid ""
"Property that returns the electoral roll data in a new Pandas         "
"`DataFrame`_ instance."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.recursive:1
msgid ""
"Property that determines if the search for pdf files in the         "
"delivered source is recursive or is only for the root of the         "
"indicated directory,"
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.source:1
msgid "list of paths to valid pdf files."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.source:2
msgid "source param must be string or list."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.source:3
msgid "source doesnt have valid PDF files."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.source:5
msgid ""
"Property that stores paths of pdf files obtained from a list or         "
"string with file paths or directories."
msgstr ""

#: of serveliza.roll.roll.ElectoralRoll.source:10
msgid ""
"The source is loaded into the constructor through the parameter         "
"of the same name. It is also possible to redefine through the         "
"property setter:"
msgstr ""

#: ../../reference.rst:30
msgid "Roll adapters"
msgstr ""

#: of serveliza.roll.adapters.RollNoisedError:1
msgid ""
"Exception that indicates an error when analyzing because the     pattern "
"is noisy, that is, it has watermarks to prevent the     coherent "
"extraction of text."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin:1
msgid ""
":class:`PdftotextAdapterMixin <.PdftotextAdapterMixin>` is an adapter for"
"     the `pdftotext <https://github.com/jalan/pdftotext>`_ processor."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin:3
#: serveliza.roll.adapters.PdftotextAdapterMixin:3
msgid ""
"It is a mixin designed to be inherited in :class:`RollAdapter     "
"<.RollAdapter>`."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext:1
msgid "sheet in text string."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext:2
msgid "Unexpected type of sheet."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext:3
msgid ""
"pdftotext processor cant process a             noised roll. Try with the "
"pdfminersix processor."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext:4
msgid "sheet adapted."
msgstr ""

#: of serveliza.roll.adapters.PdftotextAdapterMixin.adapter_pdftotext:6
msgid ""
"Method to adapt a sheet processed by `pdftotext         "
"<https://github.com/jalan/pdftotext>`_ before being         passed to the"
" parser."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin:1
msgid ""
":class:`PdfminersixAdapterMixin <.PdfminersixAdapterMixin>` is an adapter"
"     for the `pdfminersix <https://pdfminersix.readthedocs.io/>`_ "
"processor."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix:1
msgid "sheet in list of pdfminersix elements."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix:2
msgid "sheet adapted in text string."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix:4
msgid ""
"Method to adapt a sheet processed by `pdfminersix         "
"<https://pdfminersix.readthedocs.io/>`_ before being         passed to "
"the parser."
msgstr ""

#: of serveliza.roll.adapters.PdfminersixAdapterMixin.adapter_pdfminersix:6
msgid "It is also capable of eliminating possible noise with watermarks."
msgstr ""

#: of serveliza.roll.adapters.RollAdapter:1
msgid "sheet of the type according to the processor used."
msgstr ""

#: of serveliza.roll.adapters.RollAdapter:2
msgid "processor used in the sheet."
msgstr ""

#: of serveliza.roll.adapters.RollAdapter:4
msgid ""
":class:`RollAdapter <.RollAdapter>` is a class that is instantiated     "
"for a sheet by routing it to the appropriate method according to     the "
"processor defined in the constructor parameter of the same name."
msgstr ""

#: of serveliza.roll.adapters.RollAdapter:6
msgid "Practical use:"
msgstr ""

#: of serveliza.roll.adapters.RollAdapter.sheet:1
msgid "Property where the adapted sheet is stored in the constructor."
msgstr ""

#: ../../reference.rst:37
msgid "Roll parsers"
msgstr ""

#: of serveliza.roll.parsers.RollParser:1
msgid ""
":class:`RollParser <.RollParser>` is intended to be instantiated     by "
"each sheet."
msgstr ""

#: of serveliza.roll.parsers.RollParser:3
msgid ""
"Class attributes beginning with \"*regex_*\" correspond to the regular"
"     expressions used to detect fields in the header. The "
"*regexs_entries*     class attribute contains a dictionary with the "
"regular expressions     for the fields in each record and a key name for "
"each. Finally, the     *dpa_fixture_path* class attribute defines the "
"path of the .json file     that contains a compressed dictionary with "
"communes and constituencies."
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_roll:1
msgid "roll name regex"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_region:1
msgid "region regex"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_commune:1
msgid "commune regex"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_province:1
msgid "province regex"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_total_entries:1
msgid "total entries regex (optional)"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regex_pagination:1
msgid "pagination regex (optional)"
msgstr ""

#: of serveliza.roll.parsers.RollParser.regexs_entries:1
msgid "regex's for parsing entries."
msgstr ""

#: of serveliza.roll.parsers.RollParser.dpa_fixture_path:1
msgid "path to commune-circuns json."
msgstr ""

#: of serveliza.roll.parsers.RollParser.run:1
msgid ""
"Method that starts the voter registry sheet analyzer by executing: * "
":meth:`decompose <.RollParser.decompose>` * :meth:`parse_header "
"<.RollParser.parse_header>` * :meth:`parse_fields "
"<.RollParser.parse_fields>` * :meth:`parse_entries "
"<.RollParser.parse_entries>`"
msgstr ""

#: of serveliza.roll.parsers.RollParser.run:7
msgid ""
"It measures the duration times of each method executed and saves         "
"them in the :attr:`metadata[times] <.RollParser.metadata>`         "
"property."
msgstr ""

#: of serveliza.roll.parsers.RollParser.decompose:1
msgid ""
"Method that descompose a :attr:`sheet <.RollParser.sheet>`         of the"
" electoral roll in a text string into a list with each line."
msgstr ""

#: of serveliza.roll.parsers.RollParser.is_decomposed:3
msgid ""
"Property that indicates whether the '*sheet*' property is decomposed"
"         into a list of lines or not."
msgstr ""

#: of serveliza.roll.parsers.RollParser.sheet:1
msgid ""
"Property that contains a text string of the entire sheet to parse or"
"         the list of text lines if it is decomposed."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_header:1
msgid ""
"Method that parses the head of the sheet and extracts the data         "
"from *roll*, *election*, *year*, *region*, *province* and         "
"*commune* to store it in the :attr:`header         <.RollParser.header>` "
"property."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_header:3
msgid ""
"It also builds a unique identifier of the electoral roll that         it "
"stores in the :attr:`metadata <.RollParser.metadata>`         property "
"with the *rid* key."
msgstr ""

#: of serveliza.roll.parsers.RollParser.header:1
msgid ""
"Property that contains the result of method :meth:`parse_header         "
"<.SheetRollParser.parse_header>`. It consists of a         dictionary "
"with the data from the header of the electoral roll sheet."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_fields:1
msgid ""
"Method to analyze and extract the fields of the electoral roll.         "
"The direct fields of the sheet (*nombre*, *c-identidad*, *sex|o*,"
"         *domicilio-electoral*, *circunscripcion* y *mesa*) are taken and"
"         commune, province and region (*comuna*, *provincia*, *region*) "
"are         added. Result is stored in the :attr:`fields         "
"<.RollParser.fields>` property, the method returns nothing."
msgstr ""

#: of serveliza.roll.parsers.RollParser.fields:1
msgid ""
"Property that contains the fields of the electoral roll         detected "
"in the sheet through the :meth:`parse_fields         "
"<.RollParser.parse_fields>` method."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entries:1
msgid ""
"Method that analyzes and extracts each data entry from the voter         "
"registration sheet."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entries:3
msgid ""
"First determine if each line of text is well composed, that is,         "
"it begins with at least one letter and ends with a number or a space"
"         next to a single letter. Then each line of text is analyzed as "
"if it         were an input through the :meth:`parse_entry         "
"<.RollParser.parse_entry>` method."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entries:5
msgid ""
"Afterwards, the lines considered malformed are internally processed,"
"         joining them in relation to whether they start with a letter or "
"a         space. Then use the :meth:`parse_entry         "
"<.RollParser.parse_entry>` method again for each of them.         Those "
"that are rescued will remain in the :attr:`metadata         "
"<.RollParser.metadata>` property in the keys *entires* >         "
"*rescue*."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entry:1
msgid ""
"A method that extracts the data from a voter registry entry in text"
"         line format."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entry:3
msgid ""
"Finds the fields found by regular expressions that are stored in the"
"         class attribute: :attr: `regexs_entries         "
"<.RollParser.regexs_entries>`."
msgstr ""

#: of serveliza.roll.parsers.RollParser.parse_entry:5
msgid ""
"Then it looks for the district from a list according to its commune"
"         and in relation to this it determines the place of the electoral"
"         domicile."
msgstr ""

#: of serveliza.roll.parsers.RollParser.entries:1
msgid ""
"Property containing a list of entries from the electoral roll         "
"sheet. Each entry corresponds to a list of data in the order of the"
"         fields defined in the :attr:`fields <RollParser.fields>`"
"         property."
msgstr ""

#: of serveliza.roll.parsers.RollParser.metadata:1
msgid ""
"Property contains the metadata extracted during the parser analysis"
"         of the electoral roll sheet."
msgstr ""

#: of serveliza.roll.parsers.RollParser.metadata:3
msgid ""
"The metadata is stored as a dictionary, the *rid* key         "
"corresponding to the unique identifier of the voter registry of the"
"         sheet, the *times* key stores how long the analysis took (in"
"         total, during header, fields and entries), the *entries* key"
"         contains the total number of entries extracted , the amount of"
"         rescued and errors. Finally, the NULLS key contains the total"
"         number of null data inside each row or entry, as well as the "
"detail         of the fields, if there is any."
msgstr ""

#: of serveliza.roll.parsers.RollParser.errors:1
msgid ""
"Property contains a list with the errors found in the sheet analysis."
"         Each error corresponds to a dictionary with at least two keys:"
"         *code* with a semantic slug text of the error and '*target*' "
"that         contains what generated the error."
msgstr ""

#: of serveliza.roll.parsers.RollParser.fields_index:1
msgid ""
"Property that contains the index where the fields are located in the"
"         decomposed sheet as a list."
msgstr ""

#: of serveliza.roll.parsers.RollParser.circuns:1
msgid ""
"a dictionary with communes as key and list of             "
"circunscriptions as value."
msgstr ""

#: of serveliza.roll.parsers.RollParser.circuns:3
msgid ""
"Property that contains the possible electoral circunscriptions         "
"within the commune defined in the :attr:`header         "
"<.RollParser.header>` property. It will return None if         the "
":meth:`parse_header <.RollParser.parse_header>`         method has not "
"been executed."
msgstr ""

#: of serveliza.roll.parsers.RollParser.more_fields:3
msgid ""
"Property where the option of whether to add fields to the         input "
"is stored."
msgstr ""

#: ../../reference.rst:44
msgid "Roll memorizer"
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer:1
msgid "If the memorizer is activated (default True)"
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer:3
msgid ""
":class:`RollMemorizer <.RollMemorizer>` is a class that allows you     to"
" store data and errors from the electoral roll. It is instantiated     "
"within an instance of :class:`ElectoralRoll <.ElectoralRoll>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.storage:1
msgid "dictionary with all data."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.storage:3
msgid "Property where all the memorized data are stored."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.errors:1
msgid "list with errors."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.errors:3
msgid "Property where the errors found are stored."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.is_active:3
#: serveliza.roll.memorizer.RollMemorizer.is_active:3
msgid ""
"Property that indicates if the memorizer is active as defined         in "
"the constructor."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.export_sheet:1
#: serveliza.roll.memorizer.RollMemorizer.memorize:1
#: serveliza.roll.memorizer.RollMemorizer.prepare_rid:1
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_entries:1
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_nulls:1
#: serveliza.roll.memorizer.RollMemorizer.store_metadata_places:1
msgid "an instance of :class:`RollParser <.RollParser>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:3
msgid ""
":meth:`memorize <.RollMemorizer.memorize>` is the main method of         "
":class:`RollMemorizer <.RollMemorizer>`. It will memorize the         "
"metadata of an analyzed sheet, if the memorizer is active (see         "
":attr:`is_active <.RollMemorizer.is_active>` property) it will         "
"also memorize the analyzed entries. The methods executed to         "
"memorize the metadata in order:"
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:5
msgid ":meth:`prepare_rid             <.RollMemorizer.prepare_rid>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:6
msgid ""
":meth:`store_metadata_places             "
"<.RollMemorizer.store_metadata_places>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:7
msgid ""
":meth:`store_metadata_entries             "
"<.RollMemorizer.store_metadata_entries>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:8
#: serveliza.roll.memorizer.RollMemorizer.memorize:9
msgid ""
":meth:`store_metadata_nulls             "
"<.RollMemorizer.store_metadata_nulls>`."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.memorize:11
msgid "It then stores, if active, the entries and errors."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.prepare_rid:3
msgid ""
":meth:`prepare_rid <.RollMemorizer.prepare_rid>` is a method that"
"         prepares the :attr:`storage <.RollMemorizer.storage>` property "
"for         storing metadata and electoral roll data. Use the electoral "
"*roll         identifier* (see more in :attr:`rid <.ElectoralRoll.rid>`) "
"as the         key for the :attr:`storage <.RollMemorizer.storage>` "
"property."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.store_metadata_places:3
msgid ""
":meth:`store_metadata_places <.RollMemorizer.store_metadata_places>`"
"         is a method to memorize the places (regions, provinces and "
"communes)         present in the parsed sheet."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.store_metadata_entries:3
msgid ""
":meth:`store_metadata_entries <.RollMemorizer.store_metadata_entries>`"
"         is a method to memorize the metadata of the entries (*total*,"
"          *rescued*, *errors*) present in the parsed sheet. If the total"
"          number of entries is declared in the header, it is added as"
"          *declared*."
msgstr ""

#: of serveliza.roll.memorizer.RollMemorizer.store_metadata_nulls:3
msgid ""
":meth:`store_metadata_nulls <.RollMemorizer.store_metadata_nulls>`"
"         is a method to memorize the metadata of the null data in the "
"entries         (total and for each field with null data) present in the "
"parsed sheet."
msgstr ""

#: ../../reference.rst:51
msgid "Roll exporter"
msgstr ""

#: of serveliza.roll.exporter.RollExporter:1
msgid ""
":class:`RollExporter <.RollExporter>` is a class for exporting electoral"
"     roll data in csv files."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:3
msgid "If the export is activated (default False)"
msgstr ""

#: of serveliza.roll.exporter.RollExporter:4
msgid ""
"directory to store the data in .csv (see more in         :attr:`output "
"<.RollExporter.output>`."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:5
msgid ""
"determines the data export mode in files (*unified* o         "
"*separated*, see more in :attr:`mode <.RollExporter.mode>`)."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:6
msgid ""
"Criteria for separating files in export in         separate mode "
"(*region* o *commune*, see more in :attr:`mode         "
"<.RollExporter.mode>`)."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:7
msgid ""
"Determines whether exported files have a         random text string "
"appended to the end."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:8
#: serveliza.roll.exporter.RollExporter.summary:1
msgid ""
"Determines whether to generate a summary file of         the export and "
"the extracted data."
msgstr ""

#: of serveliza.roll.exporter.RollExporter:10
msgid ""
"It is instantiated within an instance of :class:`ElectoralRoll     "
"<.ElectoralRoll>`."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.modes:1
msgid "Available export modes."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.mode_sep_opts:1
msgid "Available file separation modes"
msgstr ""

#: of serveliza.roll.exporter.RollExporter.export_sheet:2
msgid "the absolute path of the file where the data was exported."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.export_sheet:4
msgid ""
":meth:`export_sheet <.RollExporter.export_sheet>` is a method of         "
"exporting the data from a parsed sheet into files as configured         "
"in the constructor."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.random_suffix:1
msgid ""
"Determines whether exported files have a random         text string "
"appended to the end."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.output:1
msgid "Directory to store the data in .csv."
msgstr ""

#: of serveliza.roll.exporter.RollExporter.mode:1
msgid ""
"Determines the data export mode in files. If it is \"unified\"         "
"(default) it creates a single csv file with the data, or if it         is"
" \"separated\" into several according to communal or         regional "
"criteria.'"
msgstr ""

#: of serveliza.roll.exporter.RollExporter.mode_sep:1
msgid "Criteria for separating files in export in separate mode."
msgstr ""

#: ../../reference.rst:58
msgid "Roll printer"
msgstr ""

#: ../../reference.rst:66
msgid "Mixins"
msgstr ""

#: ../../reference.rst:68
msgid "PDF processor mixin: :mod:`serveliza.mixins.pdf`"
msgstr ""

#: ../../reference.rst:69
msgid "Available PDF processors: :mod:`serveliza.mixins.pdf_processors`"
msgstr ""

#: ../../reference.rst:75
msgid "PDF processor mixin"
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin:1
msgid ""
"Mixin that allows an instance the ability to process     PDF files with "
"certain libraries. In the constructor,     the processor to be used is "
"defined with the argument     of the same name, binding the "
":attr:`process_pdf     <.ProcesosrPDFMixin.process_pdf>` property to the"
"     method related to it."
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin:3
msgid "PDF processor availables:"
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin:5
msgid ""
"`pdftotext <https://github.com/jalan/pdftotext>`_         (0.1.0 release)"
" with :meth:`pdftotext_processor         "
"<.ProcessorPDFMixin.processor_pdftotext>`"
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin:6
msgid ""
"`pdfminersix <https://pdfminersix.readthedocs.io/>`_         (0.1.0 "
"release) with :meth:`pdftotext_processor         "
"<.ProcessorPDFMixin.processor_pdfminersix>`"
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin.processor:1
msgid "Processor (library) to extract text from pdf file."
msgstr ""

#: of serveliza.mixins.pdf.PDFProcessorMixin.process_pdf:1
msgid ""
"Property that calls the method corresponding to the PDF file         "
"processor configured in the instance initialization."
msgstr ""

#: ../../reference.rst:82
msgid "Available PDF processors"
msgstr ""

#: of serveliza.mixins.pdf_processors.PdftotextMixin.processor_pdftotext:1
msgid ""
"Method to use `pdftotext <https://github.com/jalan/pdftotext>`_         "
"in a file specified in the argument as a path."
msgstr ""

#: of serveliza.mixins.pdf_processors.PdftotextMixin.processor_pdftotext_page:1
msgid "pdftotext not need that."
msgstr ""

#~ msgid ":mod:`serveliza.roll.roll`"
#~ msgstr ""

#~ msgid "Sub-components"
#~ msgstr ""

#~ msgid "Modules"
#~ msgstr ""

#~ msgid ""
#~ ":class:`ElectoralRoll <.ElectoralRoll>` allows to"
#~ "     instantiate an electoral register of"
#~ " the chilean Electoral Service     "
#~ "(Servicio Electoral de Chile, SERVEL) "
#~ "from PDF files."
#~ msgstr ""

#~ msgid ""
#~ "The path of the directory or file"
#~ " to be used as the data source"
#~ " must     be specified through the "
#~ "\"source\" parameter when instantiating the"
#~ "     object. The \"verbose\" parameter "
#~ "determines if the progress and the"
#~ "     result will be printed on the"
#~ " screen or will be kept silent, "
#~ "it accepts     only Boolean values. Both"
#~ " characteristics are inherited from     "
#~ ":class:`DirFilePDFMixin <.DirFilePDFMixin>` class."
#~ msgstr ""

#~ msgid ""
#~ "The :meth:`run <.ElectoralRoll.run>` method "
#~ "starts the analysis     process of the"
#~ " text extracted from each sheet of"
#~ " the files. A parser     "
#~ "(:class:`SheetRegisterParser <.SheetRegisterParser>`) will"
#~ " be iterated     over each sheet, "
#~ "which will be instantiated from the "
#~ "class defined in     the class attribute"
#~ " :attr:`parser_class <.ElectoralRoll.parser_class`     "
#~ "and called through the :meth:`parse_sheet "
#~ "<.ElectoralRoll.parse_sheet>` method. Each resulting"
#~ " object will be sent to the "
#~ ":meth:`serialize_sheet     <.ElectoralRoll.serialize_sheet>` "
#~ "method that will store the result"
#~ "     in the :attr:`storage "
#~ "<.ElectoralRoll.storage>` property, and then     "
#~ "generate a partial export ( with "
#~ "the :meth:`export_sheet     <.ElectoralRoll.export_sheet`"
#~ " method) if so specified."
#~ msgstr ""

#~ msgid ""
#~ "Setting the parameter \"auto\" to true"
#~ " in the constructor will     automatically"
#~ " start the :meth:`run <.ElectoralRoll.run>` "
#~ "method."
#~ msgstr ""

#~ msgid "Property that accesses the data entries of the electoral roll analyzed."
#~ msgstr ""

#~ msgid "Property that stores the errors of the analysis."
#~ msgstr ""

#~ msgid ""
#~ "Method that calls the class defined "
#~ "in the :attr:`parser_class         "
#~ "<.ElectoralRoll.parser_class>` class attribute, "
#~ "initializing it         with the sheet "
#~ "argument."
#~ msgstr ""

#~ msgid "Property to call the RollPrinter object instanciated in constructor."
#~ msgstr ""

#~ msgid ""
#~ "Method that starts the analysis of "
#~ "the pdf files loaded in the         "
#~ ":attr:`sheets <.ElectoralRoll.sheets>` property. "
#~ "Iterate in each         one of them "
#~ "by running the :meth:`parse_sheet         "
#~ "<.ElectoralRoll.parse_sheet>` and :meth:`serializer_sheet"
#~ "         <.ElectoralRoll.serializer_sheet>` methods."
#~ msgstr ""

#~ msgid ""
#~ "Record in the :attr:`metadata "
#~ "<.ElectoralRoll.metadata>` property         in the"
#~ " *analysis* key the duration of the"
#~ " parsing and serialization,         as well"
#~ " as when it started and ended."
#~ msgstr ""

#~ msgid "Directory(ies) or file(s) to search for valid electoral rolls."
#~ msgstr ""

#~ msgid "Parser is intended to be instantiated by each sheet."
#~ msgstr ""

#~ msgid ""
#~ "Property that contains the possible "
#~ "electoral circunscriptions         within the "
#~ "commune defined in the :attr:`header"
#~ "         <.SheetRollParser.header>` property. It "
#~ "will return None if         the "
#~ ":meth:`parse_header <.SheetRollParser.parse_header>`         "
#~ "method has not been executed."
#~ msgstr ""

#~ msgid ""
#~ "Method that descompose a :attr:`sheet "
#~ "<.SheetRollParser.sheet>`         of the electoral"
#~ " roll in a text string into a"
#~ " list with each line."
#~ msgstr ""

#~ msgid ""
#~ "Property containing a list of entries"
#~ " from the electoral roll         sheet. "
#~ "Each entry corresponds to a list "
#~ "of data in the order of the"
#~ "         fields defined in the "
#~ ":attr:`fields <SheetRollParser.fields>`         property."
#~ msgstr ""

#~ msgid ""
#~ "Property contains a list with the "
#~ "errors found in the sheet analysis."
#~ "         Each error corresponds to a "
#~ "dictionary with at least two keys:"
#~ "         '*code*' with a semantic slug "
#~ "text of the error and '*target*' "
#~ "that         contains what generated the "
#~ "error."
#~ msgstr ""

#~ msgid ""
#~ "Property that contains the fields of "
#~ "the electoral roll         detected in "
#~ "the sheet through the :meth:`parse_fields"
#~ "         <.SheetRollParser.parse_fields` method."
#~ msgstr ""

#~ msgid ""
#~ "Property contains the metadata extracted "
#~ "during the parser analysis         of "
#~ "the electoral roll sheet. The metadata"
#~ " is stored as a dictionary, the "
#~ "'*rid*' key         corresponding to the "
#~ "unique identifier of the voter registry"
#~ " of the         sheet, the '*times*' "
#~ "key stores how long the analysis "
#~ "took (in         total, during header, "
#~ "fields and entries), the '*entries*' key"
#~ "         contains the total number of "
#~ "entries extracted , the amount of"
#~ "         rescued and errors. Finally, the"
#~ " NULLS key contains the total         "
#~ "number of null data inside each "
#~ "row or entry, as well as the "
#~ "detail         of the fields, if there"
#~ " is any."
#~ msgstr ""

#~ msgid ""
#~ "First determine if each line of "
#~ "text is well composed, that is,"
#~ "         it begins with at least one"
#~ " letter and ends with a number "
#~ "or a space         next to a "
#~ "single letter. Then each line of "
#~ "text is analyzed as if it         "
#~ "were an input through the "
#~ ":meth:`parse_entry         <.SheetRollParser.parse_entry>` "
#~ "method."
#~ msgstr ""

#~ msgid ""
#~ "Afterwards, the lines considered malformed "
#~ "are internally processed,         joining them"
#~ " in relation to whether they start"
#~ " with a letter or a         space."
#~ " Then use the :meth:`parse_entry         "
#~ "<.SheetRollParser.parse_entry>` method again for "
#~ "each of them.         Those that are "
#~ "rescued will remain in the "
#~ ":attr:`metadata         <.SheetRollParser.metadata>` "
#~ "property in the keys *entires* >"
#~ "         *rescue*."
#~ msgstr ""

#~ msgid ""
#~ "Finds the fields found by regular "
#~ "expressions that are stored in the"
#~ "         class attribute: attr: `regexs_entries"
#~ "         <.SheetRollParser.regexs_entries>`."
#~ msgstr ""

#~ msgid ""
#~ "Method to analyze and extract the "
#~ "fields of the electoral roll.         "
#~ "The direct fields of the sheet "
#~ "(*nombre*, *c-identidad*, *sex|o*,         "
#~ "*domicilio-electoral*, *circunscripcion* y "
#~ "*mesa*) are taken and         commune, "
#~ "province and region (*comuna*, *provincia*,"
#~ " *region*) are         added. Result is "
#~ "stored in the :attr:`fields         "
#~ "<SheetRollParser.fields>` property, the method "
#~ "returns nothing."
#~ msgstr ""

#~ msgid ""
#~ "Method that parses the head of the"
#~ " sheet and extracts the data         "
#~ "from *roll*, *election*, *year*, *region*, "
#~ "*province* and         *commune* to store "
#~ "it in the :attr:`header         "
#~ "<.SheetRollParser.header>` property."
#~ msgstr ""

#~ msgid ""
#~ "It also builds a unique identifier "
#~ "of the electoral roll that         it"
#~ " stores in the :attr:`metadata "
#~ "<.SheetRollParser.metadata>`         property with "
#~ "the *rid* key."
#~ msgstr ""

#~ msgid ""
#~ "Method that starts the voter registry"
#~ " sheet analyzer by executing         "
#~ "methods :meth:`decompose <.SheetRollParser.decompose>`,"
#~ "         :meth:`parse_header <.SheetRollParser.parse_header>`"
#~ " and         :meth:`parse_fields "
#~ "<.SheetRollParser.parse_fields>` sequentially."
#~ msgstr ""

#~ msgid ""
#~ "It measures the duration times of "
#~ "each method executed and saves         "
#~ "them in the :attr:`metadata[times] "
#~ "<.SheetRollParser.metadata>`         property."
#~ msgstr ""

#~ msgid ""
#~ "'Determines the data export mode in "
#~ "files. If it is \"unified\"         "
#~ "(default) it creates a single csv "
#~ "file with the data, or if it"
#~ "         is \"separated\" into several "
#~ "according to communal or         regional "
#~ "criteria.'"
#~ msgstr ""

#~ msgid "Mixins modules"
#~ msgstr ""

#~ msgid ":mod:`serveliza.mixins.pdf`"
#~ msgstr ""

#~ msgid ":mod:`serveliza.mixins.pdf_processors`"
#~ msgstr ""

